# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb

Heart deases prrdiction
"""

#importing dependencies
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

from google.colab import drive
drive.mount('/content/drive')

path = '/content/drive/MyDrive/ML project/heart_disease_data.csv'
heart_data = pd.read_csv(path)

# printing the first 5 rows of the data
heart_data.head()

# print last five rows of the datadset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape

# getting some info about the data
heart_data.info()

# checking for missing values
heart_data.isnull().sum()

# statistical measures about the data
heart_data.describe()

# checking the distribution of Target Variable
heart_data['target'].value_counts()

"""1 --> Defective Heart
0 --> Healthy Haert
"""

# splitting the features and target

X = heart_data.drop(columns='target' , axis=1)
Y = heart_data['target']

print(X)

print(Y)

# splitting the data into training data and test data

X_train , X_test , Y_train , Y_test = train_test_split( X ,Y, test_size=0.2,  stratify=Y , random_state=2)

print(X.shape , X_train.shape , X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# trainig the logistic regression model with trainging data

model.fit(X_train , Y_train)

# model evaluation

#~Accuracy Score on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction , Y_train)

print('accuracy on trainig data :' , training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction , Y_test)

print('accuracy on test data :' , test_data_accuracy)

"""Building a predictive system"""

input_data = (41,0,1,130,204,0,0,172,0,1.4,2,0,2)

#change the input data toa numpy array
input_data_as_array = np.array(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)\


if (prediction[0]== 0):
  print('The person Does not have a heart disease')
else:
  print("the person has heart disease")

